security:
    encoders:
        App\Entity\User:
            algorithm: auto
        Symfony\Component\Security\Core\User\User: auto

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username

        logbook_user_provider:
            memory:
                users:
                    logbook:
                        password: '%env(APP_LOGBOOK_USER_PASSWORD)%'
                        roles: 'ROLE_LOGBOOK_USER'

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        logbook:
            host: '%logbook_subdomain%'
            pattern: ^/logbook-entry
            provider: logbook_user_provider
            http_basic: ~

        main:
            anonymous: lazy
            provider: app_user_provider
            guard:
                authenticators:
                    - App\Security\AppLoginAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

            remember_me:
                secret:   '%kernel.secret%'
                lifetime: 604800 # 1 week in seconds
                path:     /

            switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: ^/admin, roles: ROLE_ADMIN }
         - { path: ^/profile, roles: ROLE_USER }
         - { path: ^/logbook-entry, allow_if: "is_granted('ROLE_LOGBOOK_USER') or (is_granted('ROLE_USER') and user.hasValidLicense()) or is_granted('ROLE_ADMIN')" }

    role_hierarchy:
        ROLE_ADMIN:
            - ROLE_USER

        ROLE_SUPER_ADMIN:
            - ROLE_ADMIN
            - ROLE_USER_ADMIN
            - ROLE_ALLOWED_TO_SWITCH
